AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for COVID Xray application

Parameters:
  EFSpath:
    Type: String
    Default: /mnt/efs
  BuildImageName:
    Type: String
    Default: 114752328202.dkr.ecr.us-east-1.amazonaws.com/continuumio/anaconda3:latest

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True

  MountTargetSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"

  MountTargetSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"

  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      ProvisionedThroughputInMibps: 10
      ThroughputMode: provisioned
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
            Principal:
              AWS: "*"

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetOne
      SecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref MountTargetSubnetTwo
      SecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup

  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: 0777
        Path: /lambda

  # COVIDLambda:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: covid/
  #     Timeout: 3
  #     Handler: index.lambda_handler
  #     Runtime: nodejs12.x
  #     Events:
  #       HelloWorld:
  #         Type: Api
  #         Properties:
  #           Path: /hello
  #           Method: get
  #     VpcConfig:
  #       SecurityGroupIds:
  #         - !GetAtt VPC.DefaultSecurityGroup
  #       SubnetIds:
  #         - !Ref MountTargetSubnetOne
  #         - !Ref MountTargetSubnetTwo
  #     FileSystemConfigs:
  #       - Arn: !GetAtt AccessPointResource.Arn
  #         LocalMountPath: !Ref EFSpath
  #     Policies:
  #       - Statement:
  #           - Sid: AWSLambdaVPCAccessExecutionRole
  #             Effect: Allow
  #             Action:
  #               - logs:CreateLogGroup
  #               - logs:CreateLogStream
  #               - logs:PutLogEvents
  #               - ec2:CreateNetworkInterface
  #               - ec2:DescribeNetworkInterfaces
  #               - ec2:DeleteNetworkInterface
  #             Resource: "*"
  #           - Sid: AmazonElasticFileSystemClientFullAccess
  #             Effect: Allow
  #             Action:
  #               - elasticfilesystem:ClientMount
  #               - elasticfilesystem:ClientRootAccess
  #               - elasticfilesystem:ClientWrite
  #               - elasticfilesystem:DescribeMountTargets
  #             Resource: "*"

  CodeBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"

  CodeBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeDhcpOptions
              - ec2:DescribeVpcs
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: CodeBuildProjectPolicy
      Roles:
        - Ref: CodeBuildProjectRole

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: COVIDXrayCodeBuildProject
      Description: Build covid xray conda environment
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref BuildImageName
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildProjectRole.Arn
      Source:
        BuildSpec: >-
          {
            "version": "0.1",
            "phases": {
              "build": {
                "commands": [
                  'echo "Clone covid_xrays repo"',
                  'rm -rf $CODEBUILD_EFS1/lambda/covid_xrays ; mkdir -p $CODEBUILD_EFS1/lambda/covid_xrays',
                  'git clone https://github.com/hosamshahin/covid_xrays.git $CODEBUILD_EFS1/lambda/covid_xrays',
                  'echo "Create Conda env"',
                  'rm -rf $CODEBUILD_EFS1/lambda/xrays_env ; conda env create -p $CODEBUILD_EFS1/lambda/xrays_env -f $CODEBUILD_EFS1/lambda/covid_xrays/covid_xrays/environment.yml',
                  'rm -f $CODEBUILD_EFS1/lambda/covid_xrays',
                  'echo "Changing folder permissions..."',
                  'chown -R 1000:1000 $CODEBUILD_EFS1/lambda/'
                ]
              }
            }
          }
        Type: NO_SOURCE
      EncryptionKey: alias/aws/s3
      FileSystemLocations:
        - Identifier: efs1
          Location: !Sub "${FileSystemResource}.efs.us-east-1.amazonaws.com:/"
          MountOptions: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
          MountPoint: /mnt/python
          Type: EFS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      TimeoutInMinutes: 30
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        Subnets:
          - !Ref MountTargetSubnetOne
          - !Ref MountTargetSubnetTwo
        VpcId: !Ref VPC
    DependsOn:
      - AccessPointResource
      - CodeBuildProjectPolicy
# Outputs:
#   COVIDApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   COVIDLambda:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt COVIDLambda.Arn
#   COVIDLambdaIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt COVIDLambdaRole.Arn
